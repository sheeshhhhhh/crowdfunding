// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  profile   String?
  password  String?

  crodfundPosts CampaignPost[]
  donations    Donation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model refreshToken {
  id        String   @id @default(cuid())
  token     String
  userId    String

  expiresAt DateTime
}

enum CampaignStatus {
  ACTIVE
  SUCCESS
  FAILED
}


// campaign
model CampaignPost {
  id          String   @id @default(cuid())
  userId      String
  headerImage String
  title       String
  status      CampaignStatus @default(ACTIVE)

  body        String

  goal        Int // money goal
  current     Int // current money
  totalDonors Int // total donators

  donations   Donation[]

  user        User     @relation(fields: [userId], references: [id])

  // add per month report?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  endDate     DateTime?

  @@unique([userId, title])
}

model Donation { 
  id          String   @id @default(cuid())
  userId      String?
  postId      String
  amount      Int      // base on dollars

  message     String?

  user        User?     @relation(fields: [userId], references: [id])
  post        CampaignPost @relation(fields: [postId], references: [id])

  // payment info
  // paymentId   String
  // paymentType String
  // paymentStatus String
  // paymentDate DateTime
  // payerName String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}